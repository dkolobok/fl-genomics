from pathlib import Path
from omegaconf import OmegaConf
import os
import hashlib


FOLD_COUNT = 1
ETHNICITIES = ['WB', 'SA', 'AC', 'CN', 'Others']
# ETHNICITIES = ['WB1', 'WB2']
PARTS = ['train', 'val', 'test']
UKB_DATASET = '/gpfs/gpfs0/ukb_data/processed_data/fml'
PLINK_EXT = ['bed', 'bim', 'fam']
PLINK2_EXT = ['pgen', 'pvar', 'psam']

PHENOTYPE_NAME = 'standing_height'
PHENOTYPE_CODE = 50
COVARIATES = {'31': 'sex', '21003': 'age'} 
SNP_COUNTS = [5000]

MODELS = ['lassonet', 'lasso', 'mlp']

CONFIG_DIR = os.path.join(workflow.basedir, "fl/configs")
print(f'CONFIG DIR IS {CONFIG_DIR}')
config_names, = glob_wildcards(CONFIG_DIR + "/{config}.yaml")


def parse_configs(config_dir: str):
    representations = []
    for config_file in os.listdir(config_dir):
        config = OmegaConf.load(os.path.join(config_dir, config_file))
        yaml_representation = OmegaConf.to_yaml(config)
        representations.append(yaml_representation)
    return representations


def get_params_hash(config: str):
    return hashlib.sha224(config.encode()).hexdigest()
        

def get_params_hashes():
    configs = parse_configs(CONFIG_DIR)
    hashes = []
    for config in configs:
        hashes.append(get_params_hash(config))

    return hashes
    

rule ALL:
    input:
        server_models=expand("models/{phenotype}/fold_{fold}/{params_hash}/best_model.ckpt",
            phenotype=PHENOTYPE_NAME,
            fold=range(FOLD_COUNT),
            params_hash=get_params_hashes()),
            
        node_models=expand("models/{phenotype}/fold_{fold}/{params_hash}/node_{node}/best_node_model.ckpt",
            phenotype=PHENOTYPE_NAME,
            fold=range(FOLD_COUNT),
            node=range(len(ETHNICITIES)),
            params_hash=get_params_hashes())


rule server:   
    input: 
        config      = expand("{config_dir}/{config}.yaml", config_dir=CONFIG_DIR, config=config_names)
    resources:
        time        = "00:05:00",
        mem_mb      = 4000,
        partition   = "cpu"
    threads: 1
    output:
        "models/{phenotype}/fold_{fold}/{params_hash}/best_model.ckpt"
    script:
        "fl/server.py"

rule node:
    input: 
        config      = expand("{config_dir}/{config}.yaml", config_dir=CONFIG_DIR, config=config_names)
    resources:
        time        = "00:05:00",
        mem_mb      = 4000,
        partition   = "cpu"
    threads: 1
    output:
        "models/{phenotype}/fold_{fold}/{params_hash}/node_{node}/best_node_model.ckpt"
    script:
        "fl/node.py"